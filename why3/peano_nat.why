theory Nat

  type nat = O | S nat

  function add (n1 n2 : nat) : nat =
    match n1 with
    | O -> n2
    | S n -> S (add n n2)
    end

  function (+) (a b : nat) : nat = add a b

end

theory TestAdd

  use import Nat

  goal g_0_0: (* 0 + 0 = 0 *)
    O + O = O

  goal g_0_1: (* 0 + 1 = 1 *)
    O + S O = S O

  goal g_2_1: (* 2 + 1 = 3 *)
    S (S O) + S O = S (S (S O))

end


theory Add

  use import Nat

  goal plus_o_left:
    forall n. O + n = n

  goal plus_o_right:
    forall n. n + O = n

  lemma l_plus_o_right:
    forall n. n + O = n

  lemma plus_Snm_nSm : forall n m:nat. (S n) + m = n + (S m)

  lemma plus_S: forall n m:nat. S (n + m) = n + (S m)

  goal plus_comm:
    forall n m. n + m = m + n

end

theory Sub
 use import Nat

 function sub (n m:nat) : nat =
 match n, m with
 | S k, S l -> sub k l
 | _, _ -> n
 end


(*          name  inp, inp, outp*)
 inductive sub_pr nat nat nat =
 |  r1 : forall n:nat. sub_pr n O n
 |  r2 : forall n:nat. sub_pr O n O
 |  r3 : forall n m l:nat. sub_pr n m l -> sub_pr (S n) (S m) l


 inductive le nat nat =
 | Le_n : forall n:nat. le n n
 | Le_S : forall n m:nat. le n m -> le n (S m)

 predicate (<=) (x y:nat) = le x y
 predicate (<) (x y:nat) = le (S x) y
 predicate (>) (x y:nat) = le (S y) x
 predicate (>=) (x y:nat) = le y x

 goal sub_le_nm:
   forall n m. sub n m <= n

 goal sub_complete:
   forall n m l. l = sub n m <-> sub_pr n m l

 goal sub_ge_nm:
   forall n m. n >= sub n m

 goal sub_lt_nm:
   forall n m. O < n /\ O < m -> sub n m < n

end

theory Inconsistency

  lemma degenerate: true -> false    (* <-- introduces inconsistency *)

  lemma degenerated: true -> false   (* <-- exposed to inconsistency *)

end


theory AddTest

 use import Nat
 use import Add

 inductive le nat nat =
 | Le_n : forall n:nat. le n n
 | Le_S : forall n m:nat. le n m -> le n (S m)

 predicate (<=) (x y:nat) = le x y
 predicate (<)  (x y:nat) = (S x) <= y

 function f (x : nat) : nat = x + (S O)

 goal f_proof:
   forall x. x < f x

 function g (x y: nat) : nat = x + y

 goal g_proof1:
   forall x y "induction". x <= g x y

end
