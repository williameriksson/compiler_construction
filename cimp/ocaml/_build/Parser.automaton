State 0:
prog' -> . prog [ # ]
-- On WHILE shift to state 1
-- On IF shift to state 38
-- On ID shift to state 41
-- On prog shift to state 53
-- On com shift to state 54

State 1:
com -> WHILE . bexpr DO com DONE [ SC EOF END ELSE DONE ]
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LP shift to state 17
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On FALSE shift to state 18
-- On bexpr shift to state 36
-- On aexpr shift to state 23

State 2:
bexpr -> TRUE . [ THEN RP DO AND ]
-- On THEN reduce production bexpr -> TRUE 
-- On RP reduce production bexpr -> TRUE 
-- On DO reduce production bexpr -> TRUE 
-- On AND reduce production bexpr -> TRUE 

State 3:
bexpr -> NOT . bexpr [ THEN RP DO AND ]
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LP shift to state 17
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On FALSE shift to state 18
-- On bexpr shift to state 35
-- On aexpr shift to state 23

State 4:
aexpr -> MINUS . aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On MINUS shift to state 4
-- On LP shift to state 5
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On aexpr shift to state 16

State 5:
aexpr -> LP . aexpr RP [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On MINUS shift to state 4
-- On LP shift to state 5
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On aexpr shift to state 8

State 6:
aexpr -> INTVAL . [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On THEN reduce production aexpr -> INTVAL 
-- On SC reduce production aexpr -> INTVAL 
-- On RP reduce production aexpr -> INTVAL 
-- On PLUS reduce production aexpr -> INTVAL 
-- On MULT reduce production aexpr -> INTVAL 
-- On MINUS reduce production aexpr -> INTVAL 
-- On EOF reduce production aexpr -> INTVAL 
-- On END reduce production aexpr -> INTVAL 
-- On ELSE reduce production aexpr -> INTVAL 
-- On DONE reduce production aexpr -> INTVAL 
-- On DO reduce production aexpr -> INTVAL 
-- On BLE reduce production aexpr -> INTVAL 
-- On BL reduce production aexpr -> INTVAL 
-- On BEQ reduce production aexpr -> INTVAL 
-- On BBE reduce production aexpr -> INTVAL 
-- On BB reduce production aexpr -> INTVAL 
-- On AND reduce production aexpr -> INTVAL 

State 7:
aexpr -> ID . [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On THEN reduce production aexpr -> ID 
-- On SC reduce production aexpr -> ID 
-- On RP reduce production aexpr -> ID 
-- On PLUS reduce production aexpr -> ID 
-- On MULT reduce production aexpr -> ID 
-- On MINUS reduce production aexpr -> ID 
-- On EOF reduce production aexpr -> ID 
-- On END reduce production aexpr -> ID 
-- On ELSE reduce production aexpr -> ID 
-- On DONE reduce production aexpr -> ID 
-- On DO reduce production aexpr -> ID 
-- On BLE reduce production aexpr -> ID 
-- On BL reduce production aexpr -> ID 
-- On BEQ reduce production aexpr -> ID 
-- On BBE reduce production aexpr -> ID 
-- On BB reduce production aexpr -> ID 
-- On AND reduce production aexpr -> ID 

State 8:
aexpr -> LP aexpr . RP [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr . PLUS aexpr [ RP PLUS MULT MINUS ]
aexpr -> aexpr . MINUS aexpr [ RP PLUS MULT MINUS ]
aexpr -> aexpr . MULT aexpr [ RP PLUS MULT MINUS ]
-- On RP shift to state 9
-- On PLUS shift to state 10
-- On MULT shift to state 12
-- On MINUS shift to state 14

State 9:
aexpr -> LP aexpr RP . [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On THEN reduce production aexpr -> LP aexpr RP 
-- On SC reduce production aexpr -> LP aexpr RP 
-- On RP reduce production aexpr -> LP aexpr RP 
-- On PLUS reduce production aexpr -> LP aexpr RP 
-- On MULT reduce production aexpr -> LP aexpr RP 
-- On MINUS reduce production aexpr -> LP aexpr RP 
-- On EOF reduce production aexpr -> LP aexpr RP 
-- On END reduce production aexpr -> LP aexpr RP 
-- On ELSE reduce production aexpr -> LP aexpr RP 
-- On DONE reduce production aexpr -> LP aexpr RP 
-- On DO reduce production aexpr -> LP aexpr RP 
-- On BLE reduce production aexpr -> LP aexpr RP 
-- On BL reduce production aexpr -> LP aexpr RP 
-- On BEQ reduce production aexpr -> LP aexpr RP 
-- On BBE reduce production aexpr -> LP aexpr RP 
-- On BB reduce production aexpr -> LP aexpr RP 
-- On AND reduce production aexpr -> LP aexpr RP 

State 10:
aexpr -> aexpr PLUS . aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On MINUS shift to state 4
-- On LP shift to state 5
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On aexpr shift to state 11

State 11:
aexpr -> aexpr . PLUS aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr PLUS aexpr . [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr . MINUS aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr . MULT aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On MULT shift to state 12
-- On THEN reduce production aexpr -> aexpr PLUS aexpr 
-- On SC reduce production aexpr -> aexpr PLUS aexpr 
-- On RP reduce production aexpr -> aexpr PLUS aexpr 
-- On PLUS reduce production aexpr -> aexpr PLUS aexpr 
-- On MINUS reduce production aexpr -> aexpr PLUS aexpr 
-- On EOF reduce production aexpr -> aexpr PLUS aexpr 
-- On END reduce production aexpr -> aexpr PLUS aexpr 
-- On ELSE reduce production aexpr -> aexpr PLUS aexpr 
-- On DONE reduce production aexpr -> aexpr PLUS aexpr 
-- On DO reduce production aexpr -> aexpr PLUS aexpr 
-- On BLE reduce production aexpr -> aexpr PLUS aexpr 
-- On BL reduce production aexpr -> aexpr PLUS aexpr 
-- On BEQ reduce production aexpr -> aexpr PLUS aexpr 
-- On BBE reduce production aexpr -> aexpr PLUS aexpr 
-- On BB reduce production aexpr -> aexpr PLUS aexpr 
-- On AND reduce production aexpr -> aexpr PLUS aexpr 

State 12:
aexpr -> aexpr MULT . aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On MINUS shift to state 4
-- On LP shift to state 5
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On aexpr shift to state 13

State 13:
aexpr -> aexpr . PLUS aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr . MINUS aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr . MULT aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr MULT aexpr . [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On THEN reduce production aexpr -> aexpr MULT aexpr 
-- On SC reduce production aexpr -> aexpr MULT aexpr 
-- On RP reduce production aexpr -> aexpr MULT aexpr 
-- On PLUS reduce production aexpr -> aexpr MULT aexpr 
-- On MULT reduce production aexpr -> aexpr MULT aexpr 
-- On MINUS reduce production aexpr -> aexpr MULT aexpr 
-- On EOF reduce production aexpr -> aexpr MULT aexpr 
-- On END reduce production aexpr -> aexpr MULT aexpr 
-- On ELSE reduce production aexpr -> aexpr MULT aexpr 
-- On DONE reduce production aexpr -> aexpr MULT aexpr 
-- On DO reduce production aexpr -> aexpr MULT aexpr 
-- On BLE reduce production aexpr -> aexpr MULT aexpr 
-- On BL reduce production aexpr -> aexpr MULT aexpr 
-- On BEQ reduce production aexpr -> aexpr MULT aexpr 
-- On BBE reduce production aexpr -> aexpr MULT aexpr 
-- On BB reduce production aexpr -> aexpr MULT aexpr 
-- On AND reduce production aexpr -> aexpr MULT aexpr 

State 14:
aexpr -> aexpr MINUS . aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On MINUS shift to state 4
-- On LP shift to state 5
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On aexpr shift to state 15

State 15:
aexpr -> aexpr . PLUS aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr . MINUS aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr MINUS aexpr . [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr . MULT aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On MULT shift to state 12
-- On THEN reduce production aexpr -> aexpr MINUS aexpr 
-- On SC reduce production aexpr -> aexpr MINUS aexpr 
-- On RP reduce production aexpr -> aexpr MINUS aexpr 
-- On PLUS reduce production aexpr -> aexpr MINUS aexpr 
-- On MINUS reduce production aexpr -> aexpr MINUS aexpr 
-- On EOF reduce production aexpr -> aexpr MINUS aexpr 
-- On END reduce production aexpr -> aexpr MINUS aexpr 
-- On ELSE reduce production aexpr -> aexpr MINUS aexpr 
-- On DONE reduce production aexpr -> aexpr MINUS aexpr 
-- On DO reduce production aexpr -> aexpr MINUS aexpr 
-- On BLE reduce production aexpr -> aexpr MINUS aexpr 
-- On BL reduce production aexpr -> aexpr MINUS aexpr 
-- On BEQ reduce production aexpr -> aexpr MINUS aexpr 
-- On BBE reduce production aexpr -> aexpr MINUS aexpr 
-- On BB reduce production aexpr -> aexpr MINUS aexpr 
-- On AND reduce production aexpr -> aexpr MINUS aexpr 

State 16:
aexpr -> aexpr . PLUS aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr . MINUS aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> aexpr . MULT aexpr [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
aexpr -> MINUS aexpr . [ THEN SC RP PLUS MULT MINUS EOF END ELSE DONE DO BLE BL BEQ BBE BB AND ]
-- On MULT shift to state 12
-- On THEN reduce production aexpr -> MINUS aexpr 
-- On SC reduce production aexpr -> MINUS aexpr 
-- On RP reduce production aexpr -> MINUS aexpr 
-- On PLUS reduce production aexpr -> MINUS aexpr 
-- On MINUS reduce production aexpr -> MINUS aexpr 
-- On EOF reduce production aexpr -> MINUS aexpr 
-- On END reduce production aexpr -> MINUS aexpr 
-- On ELSE reduce production aexpr -> MINUS aexpr 
-- On DONE reduce production aexpr -> MINUS aexpr 
-- On DO reduce production aexpr -> MINUS aexpr 
-- On BLE reduce production aexpr -> MINUS aexpr 
-- On BL reduce production aexpr -> MINUS aexpr 
-- On BEQ reduce production aexpr -> MINUS aexpr 
-- On BBE reduce production aexpr -> MINUS aexpr 
-- On BB reduce production aexpr -> MINUS aexpr 
-- On AND reduce production aexpr -> MINUS aexpr 

State 17:
aexpr -> LP . aexpr RP [ RP PLUS MULT MINUS BLE BL BEQ BBE BB ]
bexpr -> LP . bexpr RP [ THEN RP DO AND ]
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LP shift to state 17
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On FALSE shift to state 18
-- On bexpr shift to state 19
-- On aexpr shift to state 34

State 18:
bexpr -> FALSE . [ THEN RP DO AND ]
-- On THEN reduce production bexpr -> FALSE 
-- On RP reduce production bexpr -> FALSE 
-- On DO reduce production bexpr -> FALSE 
-- On AND reduce production bexpr -> FALSE 

State 19:
bexpr -> LP bexpr . RP [ THEN RP DO AND ]
bexpr -> bexpr . AND bexpr [ RP AND ]
-- On RP shift to state 20
-- On AND shift to state 21

State 20:
bexpr -> LP bexpr RP . [ THEN RP DO AND ]
-- On THEN reduce production bexpr -> LP bexpr RP 
-- On RP reduce production bexpr -> LP bexpr RP 
-- On DO reduce production bexpr -> LP bexpr RP 
-- On AND reduce production bexpr -> LP bexpr RP 

State 21:
bexpr -> bexpr AND . bexpr [ THEN RP DO AND ]
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LP shift to state 17
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On FALSE shift to state 18
-- On bexpr shift to state 22
-- On aexpr shift to state 23

State 22:
bexpr -> bexpr . AND bexpr [ THEN RP DO AND ]
bexpr -> bexpr AND bexpr . [ THEN RP DO AND ]
-- On THEN reduce production bexpr -> bexpr AND bexpr 
-- On RP reduce production bexpr -> bexpr AND bexpr 
-- On DO reduce production bexpr -> bexpr AND bexpr 
-- On AND reduce production bexpr -> bexpr AND bexpr 

State 23:
aexpr -> aexpr . PLUS aexpr [ PLUS MULT MINUS BLE BL BEQ BBE BB ]
aexpr -> aexpr . MINUS aexpr [ PLUS MULT MINUS BLE BL BEQ BBE BB ]
aexpr -> aexpr . MULT aexpr [ PLUS MULT MINUS BLE BL BEQ BBE BB ]
bexpr -> aexpr . BL aexpr [ THEN RP DO AND ]
bexpr -> aexpr . BB aexpr [ THEN RP DO AND ]
bexpr -> aexpr . BEQ aexpr [ THEN RP DO AND ]
bexpr -> aexpr . BLE aexpr [ THEN RP DO AND ]
bexpr -> aexpr . BBE aexpr [ THEN RP DO AND ]
-- On PLUS shift to state 10
-- On MULT shift to state 12
-- On MINUS shift to state 14
-- On BLE shift to state 24
-- On BL shift to state 26
-- On BEQ shift to state 28
-- On BBE shift to state 30
-- On BB shift to state 32

State 24:
bexpr -> aexpr BLE . aexpr [ THEN RP DO AND ]
-- On MINUS shift to state 4
-- On LP shift to state 5
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On aexpr shift to state 25

State 25:
aexpr -> aexpr . PLUS aexpr [ THEN RP PLUS MULT MINUS DO AND ]
aexpr -> aexpr . MINUS aexpr [ THEN RP PLUS MULT MINUS DO AND ]
aexpr -> aexpr . MULT aexpr [ THEN RP PLUS MULT MINUS DO AND ]
bexpr -> aexpr BLE aexpr . [ THEN RP DO AND ]
-- On PLUS shift to state 10
-- On MULT shift to state 12
-- On MINUS shift to state 14
-- On THEN reduce production bexpr -> aexpr BLE aexpr 
-- On RP reduce production bexpr -> aexpr BLE aexpr 
-- On DO reduce production bexpr -> aexpr BLE aexpr 
-- On AND reduce production bexpr -> aexpr BLE aexpr 

State 26:
bexpr -> aexpr BL . aexpr [ THEN RP DO AND ]
-- On MINUS shift to state 4
-- On LP shift to state 5
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On aexpr shift to state 27

State 27:
aexpr -> aexpr . PLUS aexpr [ THEN RP PLUS MULT MINUS DO AND ]
aexpr -> aexpr . MINUS aexpr [ THEN RP PLUS MULT MINUS DO AND ]
aexpr -> aexpr . MULT aexpr [ THEN RP PLUS MULT MINUS DO AND ]
bexpr -> aexpr BL aexpr . [ THEN RP DO AND ]
-- On PLUS shift to state 10
-- On MULT shift to state 12
-- On MINUS shift to state 14
-- On THEN reduce production bexpr -> aexpr BL aexpr 
-- On RP reduce production bexpr -> aexpr BL aexpr 
-- On DO reduce production bexpr -> aexpr BL aexpr 
-- On AND reduce production bexpr -> aexpr BL aexpr 

State 28:
bexpr -> aexpr BEQ . aexpr [ THEN RP DO AND ]
-- On MINUS shift to state 4
-- On LP shift to state 5
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On aexpr shift to state 29

State 29:
aexpr -> aexpr . PLUS aexpr [ THEN RP PLUS MULT MINUS DO AND ]
aexpr -> aexpr . MINUS aexpr [ THEN RP PLUS MULT MINUS DO AND ]
aexpr -> aexpr . MULT aexpr [ THEN RP PLUS MULT MINUS DO AND ]
bexpr -> aexpr BEQ aexpr . [ THEN RP DO AND ]
-- On PLUS shift to state 10
-- On MULT shift to state 12
-- On MINUS shift to state 14
-- On THEN reduce production bexpr -> aexpr BEQ aexpr 
-- On RP reduce production bexpr -> aexpr BEQ aexpr 
-- On DO reduce production bexpr -> aexpr BEQ aexpr 
-- On AND reduce production bexpr -> aexpr BEQ aexpr 

State 30:
bexpr -> aexpr BBE . aexpr [ THEN RP DO AND ]
-- On MINUS shift to state 4
-- On LP shift to state 5
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On aexpr shift to state 31

State 31:
aexpr -> aexpr . PLUS aexpr [ THEN RP PLUS MULT MINUS DO AND ]
aexpr -> aexpr . MINUS aexpr [ THEN RP PLUS MULT MINUS DO AND ]
aexpr -> aexpr . MULT aexpr [ THEN RP PLUS MULT MINUS DO AND ]
bexpr -> aexpr BBE aexpr . [ THEN RP DO AND ]
-- On PLUS shift to state 10
-- On MULT shift to state 12
-- On MINUS shift to state 14
-- On THEN reduce production bexpr -> aexpr BBE aexpr 
-- On RP reduce production bexpr -> aexpr BBE aexpr 
-- On DO reduce production bexpr -> aexpr BBE aexpr 
-- On AND reduce production bexpr -> aexpr BBE aexpr 

State 32:
bexpr -> aexpr BB . aexpr [ THEN RP DO AND ]
-- On MINUS shift to state 4
-- On LP shift to state 5
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On aexpr shift to state 33

State 33:
aexpr -> aexpr . PLUS aexpr [ THEN RP PLUS MULT MINUS DO AND ]
aexpr -> aexpr . MINUS aexpr [ THEN RP PLUS MULT MINUS DO AND ]
aexpr -> aexpr . MULT aexpr [ THEN RP PLUS MULT MINUS DO AND ]
bexpr -> aexpr BB aexpr . [ THEN RP DO AND ]
-- On PLUS shift to state 10
-- On MULT shift to state 12
-- On MINUS shift to state 14
-- On THEN reduce production bexpr -> aexpr BB aexpr 
-- On RP reduce production bexpr -> aexpr BB aexpr 
-- On DO reduce production bexpr -> aexpr BB aexpr 
-- On AND reduce production bexpr -> aexpr BB aexpr 

State 34:
aexpr -> LP aexpr . RP [ RP PLUS MULT MINUS BLE BL BEQ BBE BB ]
aexpr -> aexpr . PLUS aexpr [ RP PLUS MULT MINUS BLE BL BEQ BBE BB ]
aexpr -> aexpr . MINUS aexpr [ RP PLUS MULT MINUS BLE BL BEQ BBE BB ]
aexpr -> aexpr . MULT aexpr [ RP PLUS MULT MINUS BLE BL BEQ BBE BB ]
bexpr -> aexpr . BL aexpr [ RP AND ]
bexpr -> aexpr . BB aexpr [ RP AND ]
bexpr -> aexpr . BEQ aexpr [ RP AND ]
bexpr -> aexpr . BLE aexpr [ RP AND ]
bexpr -> aexpr . BBE aexpr [ RP AND ]
-- On RP shift to state 9
-- On PLUS shift to state 10
-- On MULT shift to state 12
-- On MINUS shift to state 14
-- On BLE shift to state 24
-- On BL shift to state 26
-- On BEQ shift to state 28
-- On BBE shift to state 30
-- On BB shift to state 32

State 35:
bexpr -> bexpr . AND bexpr [ THEN RP DO AND ]
bexpr -> NOT bexpr . [ THEN RP DO AND ]
-- On THEN reduce production bexpr -> NOT bexpr 
-- On RP reduce production bexpr -> NOT bexpr 
-- On DO reduce production bexpr -> NOT bexpr 
-- On AND reduce production bexpr -> NOT bexpr 

State 36:
bexpr -> bexpr . AND bexpr [ DO AND ]
com -> WHILE bexpr . DO com DONE [ SC EOF END ELSE DONE ]
-- On DO shift to state 37
-- On AND shift to state 21

State 37:
com -> WHILE bexpr DO . com DONE [ SC EOF END ELSE DONE ]
-- On WHILE shift to state 1
-- On IF shift to state 38
-- On ID shift to state 41
-- On com shift to state 51

State 38:
com -> IF . bexpr THEN com ELSE com END [ SC EOF END ELSE DONE ]
com -> IF . bexpr THEN com END [ SC EOF END ELSE DONE ]
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LP shift to state 17
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On FALSE shift to state 18
-- On bexpr shift to state 39
-- On aexpr shift to state 23

State 39:
bexpr -> bexpr . AND bexpr [ THEN AND ]
com -> IF bexpr . THEN com ELSE com END [ SC EOF END ELSE DONE ]
com -> IF bexpr . THEN com END [ SC EOF END ELSE DONE ]
-- On THEN shift to state 40
-- On AND shift to state 21

State 40:
com -> IF bexpr THEN . com ELSE com END [ SC EOF END ELSE DONE ]
com -> IF bexpr THEN . com END [ SC EOF END ELSE DONE ]
-- On WHILE shift to state 1
-- On IF shift to state 38
-- On ID shift to state 41
-- On com shift to state 44

State 41:
com -> ID . ASSIGN aexpr [ SC EOF END ELSE DONE ]
-- On ASSIGN shift to state 42

State 42:
com -> ID ASSIGN . aexpr [ SC EOF END ELSE DONE ]
-- On MINUS shift to state 4
-- On LP shift to state 5
-- On INTVAL shift to state 6
-- On ID shift to state 7
-- On aexpr shift to state 43

State 43:
aexpr -> aexpr . PLUS aexpr [ SC PLUS MULT MINUS EOF END ELSE DONE ]
aexpr -> aexpr . MINUS aexpr [ SC PLUS MULT MINUS EOF END ELSE DONE ]
aexpr -> aexpr . MULT aexpr [ SC PLUS MULT MINUS EOF END ELSE DONE ]
com -> ID ASSIGN aexpr . [ SC EOF END ELSE DONE ]
-- On PLUS shift to state 10
-- On MULT shift to state 12
-- On MINUS shift to state 14
-- On SC reduce production com -> ID ASSIGN aexpr 
-- On EOF reduce production com -> ID ASSIGN aexpr 
-- On END reduce production com -> ID ASSIGN aexpr 
-- On ELSE reduce production com -> ID ASSIGN aexpr 
-- On DONE reduce production com -> ID ASSIGN aexpr 

State 44:
com -> com . SC com [ SC END ELSE ]
com -> IF bexpr THEN com . ELSE com END [ SC EOF END ELSE DONE ]
com -> IF bexpr THEN com . END [ SC EOF END ELSE DONE ]
-- On SC shift to state 45
-- On END shift to state 47
-- On ELSE shift to state 48

State 45:
com -> com SC . com [ SC EOF END ELSE DONE ]
-- On WHILE shift to state 1
-- On IF shift to state 38
-- On ID shift to state 41
-- On com shift to state 46

State 46:
com -> com . SC com [ SC EOF END ELSE DONE ]
com -> com SC com . [ SC EOF END ELSE DONE ]
-- On SC reduce production com -> com SC com 
-- On EOF reduce production com -> com SC com 
-- On END reduce production com -> com SC com 
-- On ELSE reduce production com -> com SC com 
-- On DONE reduce production com -> com SC com 

State 47:
com -> IF bexpr THEN com END . [ SC EOF END ELSE DONE ]
-- On SC reduce production com -> IF bexpr THEN com END 
-- On EOF reduce production com -> IF bexpr THEN com END 
-- On END reduce production com -> IF bexpr THEN com END 
-- On ELSE reduce production com -> IF bexpr THEN com END 
-- On DONE reduce production com -> IF bexpr THEN com END 

State 48:
com -> IF bexpr THEN com ELSE . com END [ SC EOF END ELSE DONE ]
-- On WHILE shift to state 1
-- On IF shift to state 38
-- On ID shift to state 41
-- On com shift to state 49

State 49:
com -> com . SC com [ SC END ]
com -> IF bexpr THEN com ELSE com . END [ SC EOF END ELSE DONE ]
-- On SC shift to state 45
-- On END shift to state 50

State 50:
com -> IF bexpr THEN com ELSE com END . [ SC EOF END ELSE DONE ]
-- On SC reduce production com -> IF bexpr THEN com ELSE com END 
-- On EOF reduce production com -> IF bexpr THEN com ELSE com END 
-- On END reduce production com -> IF bexpr THEN com ELSE com END 
-- On ELSE reduce production com -> IF bexpr THEN com ELSE com END 
-- On DONE reduce production com -> IF bexpr THEN com ELSE com END 

State 51:
com -> com . SC com [ SC DONE ]
com -> WHILE bexpr DO com . DONE [ SC EOF END ELSE DONE ]
-- On SC shift to state 45
-- On DONE shift to state 52

State 52:
com -> WHILE bexpr DO com DONE . [ SC EOF END ELSE DONE ]
-- On SC reduce production com -> WHILE bexpr DO com DONE 
-- On EOF reduce production com -> WHILE bexpr DO com DONE 
-- On END reduce production com -> WHILE bexpr DO com DONE 
-- On ELSE reduce production com -> WHILE bexpr DO com DONE 
-- On DONE reduce production com -> WHILE bexpr DO com DONE 

State 53:
prog' -> prog . [ # ]
-- On # accept prog

State 54:
com -> com . SC com [ SC EOF ]
prog -> com . EOF [ # ]
-- On SC shift to state 45
-- On EOF shift to state 55

State 55:
prog -> com EOF . [ # ]
-- On # reduce production prog -> com EOF 

